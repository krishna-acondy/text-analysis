{"version":3,"sources":["utils/TextUtils.js","components/WordList/WordList.jsx","components/PieChart/PieChart.jsx","App.js","serviceWorker.js","index.js"],"names":["ignoredWords","WordList","words","title","onWordAdd","color","onWordDelete","useState","newWord","setNewWord","className","Header","as","Form","Input","type","placeholder","value","onChange","e","target","Button","primary","onClick","toLocaleLowerCase","map","word","index","Label","key","Icon","name","Chart","result","width","height","dataKey","data","label","entry","fill","Math","floor","random","toString","App","stopWords","setStopWords","setWords","inputText","setInputText","setResult","TextArea","text","wordsToCount","toLowerCase","trim","replace","split","filter","w","includes","sort","length","wordFrequencies","forEach","wordFrequenciesArray","Object","keys","push","frequency","a","b","countWordFrequencies","Table","HeaderCell","part","Row","Cell","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f307ca33.chunk.js","sourcesContent":["export const ignoredWords = [\n  \"and\",\n  \"the\",\n  \"to\",\n  \"a\",\n  \"of\",\n  \"for\",\n  \"as\",\n  \"i\",\n  \"with\",\n  \"it\",\n  \"is\",\n  \"on\",\n  \"that\",\n  \"this\",\n  \"can\",\n  \"in\",\n  \"be\",\n  \"has\",\n  \"if\",\n];\n\nexport const countWordFrequencies = (\n  text,\n  wordsToCount = [],\n  stopWords = ignoredWords\n) => {\n  let words = text\n    .toLowerCase()\n    .trim()\n    .replace(/[,;.()'\"]/g, \"\")\n    .replace(/[0-9]/g, \"\")\n    .split(/[\\s/]+/g)\n    .filter((w) => !stopWords.includes(w))\n    .sort();\n\n  if (wordsToCount.length) {\n    words = words.filter((w) => wordsToCount.includes(w));\n  }\n\n  const wordFrequencies = {};\n\n  words.forEach((word) => {\n    wordFrequencies[word] = wordFrequencies[word] || 0;\n    wordFrequencies[word]++;\n  });\n\n  const wordFrequenciesArray = [];\n  Object.keys(wordFrequencies).forEach((word) => {\n    wordFrequenciesArray.push({ word, frequency: wordFrequencies[word] });\n  });\n\n  return wordFrequenciesArray.sort((a, b) => b.frequency - a.frequency);\n};\n","import React, { useState } from \"react\";\nimport { Header, Form, Input, Button, Label, Icon } from \"semantic-ui-react\";\nimport \"./WordList.scss\";\n\nconst WordList = ({ words, title, onWordAdd, onWordDelete, color }) => {\n  const [newWord, setNewWord] = useState(\"\");\n  return (\n    <div className=\"words\">\n      <Header as=\"h2\">{title}</Header>\n      <Form className=\"add-word\">\n        <Input\n          type=\"text\"\n          placeholder=\"Add new word\"\n          value={newWord}\n          onChange={(e) => setNewWord(e.target.value)}\n        />\n        <Button\n          primary\n          onClick={() => {\n            onWordAdd(newWord.toLocaleLowerCase());\n            setNewWord(\"\");\n          }}\n        >\n          Add\n        </Button>\n      </Form>\n      <div>\n        {words &&\n          words.map((word, index) => {\n            return (\n              <Label key={index} color={color}>\n                {word}\n                <Icon name=\"delete\" />\n              </Label>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default WordList;\n","import React from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\n\nconst generateRandomColor = () => {\n  var randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n  return randomColor;\n};\n\nconst Chart = ({ result }) => {\n  return (\n    <PieChart width={400} height={400}>\n      <Pie dataKey=\"frequency\" data={result} label>\n        {result.map((entry, index) => (\n          <Cell key={index} fill={generateRandomColor()}>\n            {entry.word}\n          </Cell>\n        ))}\n      </Pie>\n    </PieChart>\n  );\n};\n\nexport default Chart;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { countWordFrequencies, ignoredWords } from \"./utils/TextUtils\";\nimport { TextArea, Header, Form, Button, Table } from \"semantic-ui-react\";\nimport WordList from \"./components/WordList/WordList\";\nimport Chart from \"./components/PieChart/PieChart\";\n\nconst App = () => {\n  const [stopWords, setStopWords] = useState(ignoredWords || []);\n  const [words, setWords] = useState([]);\n  const [inputText, setInputText] = useState(\"\");\n  const [result, setResult] = useState(null);\n\n  return (\n    <div className={`app ${result ? \"split-screen\" : \"\"}`}>\n      <div className=\"control-panel\">\n        <Form className=\"full-width\">\n          <Header as=\"h2\">Input Text</Header>\n          <TextArea\n            placeholder=\"Paste or type in your text here\"\n            className=\"text-input\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n          />\n          <Button\n            className=\"spaced-top\"\n            primary\n            onClick={() => {\n              const result = countWordFrequencies(inputText, words, stopWords);\n              setResult(result);\n            }}\n          >\n            Count word frequencies\n          </Button>\n        </Form>\n        <WordList\n          words={words}\n          color=\"green\"\n          title=\"Words to count\"\n          onWordAdd={(word) =>\n            setWords((value) => [...value, word.toLocaleLowerCase()])\n          }\n        />\n        <WordList\n          words={stopWords}\n          color=\"orange\"\n          title=\"Ignored Words\"\n          onWordAdd={(word) =>\n            setStopWords((value) => [...value, word.toLocaleLowerCase()])\n          }\n        />\n      </div>\n      {!!result && (\n        <div className=\"result\">\n          <Chart result={result} />\n          <Table>\n            <Table.Header>\n              <Table.HeaderCell>Word</Table.HeaderCell>\n              <Table.HeaderCell>Count</Table.HeaderCell>\n            </Table.Header>\n            {result.map((part, index) => {\n              return (\n                <Table.Row key={index}>\n                  <Table.Cell>{part.word}</Table.Cell>\n                  <Table.Cell>{part.frequency}</Table.Cell>\n                </Table.Row>\n              );\n            })}\n          </Table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}