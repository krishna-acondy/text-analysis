{"version":3,"sources":["utils/TextUtils.js","components/WordList/WordList.jsx","components/Chart/Chart.jsx","components/ResultTable/ResultTable.jsx","App.js","serviceWorker.js","index.js"],"names":["ignoredWords","WordList","words","title","onWordAdd","onWordDelete","color","useState","newWord","setNewWord","className","Header","as","Form","Input","type","placeholder","value","onChange","e","target","Button","primary","onClick","toLocaleLowerCase","map","word","index","Label","key","Icon","name","Chart","result","width","height","isAnimationActive","dataKey","data","label","nameKey","entry","fill","Math","floor","random","toString","phrase","ResultTable","text","Parser","parse","onCopy","icon","Table","Row","HeaderCell","Body","part","Cell","frequency","percentage","toFixed","App","stopWords","setStopWords","setWords","inputText","setInputText","setResult","TextArea","phrasesToCount","stopPhrases","toLowerCase","trim","replace","split","filter","w","includes","sort","totalWordCount","length","phraseFrequencies","forEach","Object","keys","regexp","RegExp","count","match","wordFrequenciesArray","push","a","b","countWordFrequencies","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd9ce7c4.chunk.js","sourcesContent":["export const ignoredWords = [\n  \"and\",\n  \"the\",\n  \"to\",\n  \"a\",\n  \"of\",\n  \"for\",\n  \"as\",\n  \"i\",\n  \"with\",\n  \"it\",\n  \"is\",\n  \"on\",\n  \"that\",\n  \"this\",\n  \"can\",\n  \"in\",\n  \"be\",\n  \"has\",\n  \"if\",\n];\n\nexport const countWordFrequencies = (\n  text,\n  phrasesToCount = [],\n  stopPhrases = ignoredWords\n) => {\n  let words = text\n    .toLowerCase()\n    .trim()\n    .replace(/[,;.()'\"]/g, \"\")\n    .replace(/[0-9]/g, \"\")\n    .split(/[\\s/]+/g)\n    .filter((w) => !stopPhrases.includes(w))\n    .sort();\n\n  const totalWordCount = words.length;\n  const phraseFrequencies = {};\n\n  phrasesToCount.forEach((phrase) => {\n    if (\n      !Object.keys(phraseFrequencies).includes(phrase) &&\n      !stopPhrases.includes(phrase)\n    ) {\n      const regexp = new RegExp(phrase, \"gi\");\n      const count = (text.match(regexp) || []).length;\n      phraseFrequencies[phrase] = count;\n    }\n  });\n\n  const wordFrequenciesArray = [];\n  Object.keys(phraseFrequencies).forEach((phrase) => {\n    wordFrequenciesArray.push({\n      phrase,\n      frequency: phraseFrequencies[phrase],\n      percentage: (phraseFrequencies[phrase] / totalWordCount) * 100,\n    });\n  });\n\n  return {\n    totalWordCount,\n    words: wordFrequenciesArray.sort((a, b) => b.frequency - a.frequency),\n  };\n};\n","import React, { useState } from \"react\";\nimport { Header, Form, Input, Button, Label, Icon } from \"semantic-ui-react\";\nimport \"./WordList.scss\";\n\nconst WordList = ({ words, title, onWordAdd, onWordDelete, color }) => {\n  const [newWord, setNewWord] = useState(\"\");\n  return (\n    <div className=\"words\">\n      <Header as=\"h2\">{title}</Header>\n      <Form className=\"add-word\">\n        <Input\n          type=\"text\"\n          placeholder=\"Add new word\"\n          value={newWord}\n          onChange={(e) => setNewWord(e.target.value)}\n        />\n        <Button\n          primary\n          onClick={() => {\n            onWordAdd(newWord.toLocaleLowerCase());\n            setNewWord(\"\");\n          }}\n        >\n          Add\n        </Button>\n      </Form>\n      <div>\n        {words &&\n          words.map((word, index) => {\n            return (\n              <Label key={index} color={color}>\n                {word}\n                <Icon name=\"delete\" onClick={() => onWordDelete(word)} />\n              </Label>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default WordList;\n","import React from \"react\";\nimport { PieChart, Pie, Cell, Tooltip } from \"recharts\";\nimport \"./Chart.scss\";\n\nconst generateRandomColor = () => {\n  var randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n  return randomColor;\n};\n\nconst Chart = ({ result }) => {\n  return (\n    <PieChart width={400} height={400}>\n      <Pie\n        isAnimationActive={true}\n        dataKey=\"frequency\"\n        data={result}\n        label\n        nameKey=\"phrase\"\n      >\n        {result.map((entry, index) => (\n          <Cell key={index} fill={generateRandomColor()}>\n            {entry.phrase}\n          </Cell>\n        ))}\n      </Pie>\n      <Tooltip />\n    </PieChart>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport { Table, Button, Icon } from \"semantic-ui-react\";\nimport { Parser } from \"json2csv\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nconst ResultTable = ({ result }) => {\n  return result ? (\n    <>\n      <CopyToClipboard text={new Parser().parse(result)} onCopy={() => {}}>\n        <Button icon>\n          <Icon name=\"copy\" />\n          Copy to clipboard\n        </Button>\n      </CopyToClipboard>\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Word</Table.HeaderCell>\n            <Table.HeaderCell>Count</Table.HeaderCell>\n            <Table.HeaderCell>Percentage</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {result.map((part, index) => {\n            return (\n              <Table.Row key={index}>\n                <Table.Cell>{part.phrase}</Table.Cell>\n                <Table.Cell>{part.frequency}</Table.Cell>\n                <Table.Cell>{part.percentage.toFixed(2)}%</Table.Cell>\n              </Table.Row>\n            );\n          })}\n        </Table.Body>\n      </Table>\n    </>\n  ) : (\n    <></>\n  );\n};\n\nexport default ResultTable;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { countWordFrequencies, ignoredWords } from \"./utils/TextUtils\";\nimport { TextArea, Header, Form, Button, Label } from \"semantic-ui-react\";\nimport WordList from \"./components/WordList/WordList\";\nimport Chart from \"./components/Chart/Chart\";\nimport ResultTable from \"./components/ResultTable/ResultTable\";\n\nconst App = () => {\n  const [stopWords, setStopWords] = useState(ignoredWords || []);\n  const [words, setWords] = useState([]);\n  const [inputText, setInputText] = useState(\"\");\n  const [result, setResult] = useState(null);\n\n  return (\n    <div className={`app ${result ? \"split-screen\" : \"\"}`}>\n      <div className=\"control-panel\">\n        <Form className=\"full-width\">\n          <Header as=\"h2\">Input Text</Header>\n          <TextArea\n            placeholder=\"Paste or type in your text here\"\n            className=\"text-input\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n          />\n          <Button\n            className=\"spaced-top\"\n            primary\n            onClick={() => {\n              const result = countWordFrequencies(inputText, words, stopWords);\n              setResult(result);\n            }}\n          >\n            Count frequencies\n          </Button>\n        </Form>\n        <WordList\n          words={words}\n          color=\"green\"\n          title=\"Words/Phrases to count\"\n          onWordAdd={(word) => setWords([...words, word.toLocaleLowerCase()])}\n          onWordDelete={(word) => {\n            setWords(words.filter((w) => w !== word));\n          }}\n        />\n        <WordList\n          words={stopWords}\n          color=\"orange\"\n          title=\"Ignored Words/Phrases\"\n          onWordAdd={(word) =>\n            setStopWords([...stopWords, word.toLocaleLowerCase()])\n          }\n          onWordDelete={(word) => {\n            setStopWords(stopWords.filter((w) => w !== word));\n          }}\n        />\n      </div>\n      {!!result && Object.keys(result).length && (\n        <div className=\"result\">\n          <Chart result={result.words} />\n          <Header as=\"h1\">\n            <Label color=\"teal\">Total words: {result.totalWordCount}</Label>\n          </Header>\n          <ResultTable result={result.words} />\n        </div>\n      )}\n      {!result ||\n        (!!!Object.keys(result).length && (\n          <div>\n            None of the specified words were found in the text.\n            <br />\n            Please try again with a different set of words.\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}